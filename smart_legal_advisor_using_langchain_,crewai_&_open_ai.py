# -*- coding: utf-8 -*-
"""Smart Legal Advisor using langchain ,crewai & open ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k360jAiLXMxsPZ9Hsa70_UCvTEiPYxpo
"""

# Install required packages
!pip install crewai langchain-openai python-dotenv PyPDF2 --quiet

import os
from crewai import Agent, Task, Crew
from langchain_openai import ChatOpenAI
from google.colab import userdata, files
import PyPDF2

# Set the OpenAI API key (use Colab Secrets for security)
try:
    os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")
except:
    # Fallback: Hardcode API key (replace with your key, but avoid sharing)
    os.environ["OPENAI_API_KEY"] = "8dU_ldW2svjT3BlbkFJIPlfO6jmQg9KsOn0pwW6RvskerLrrsk_N0r1MIhRqurjCOS9vNFjtkMUv7AE7n-unrZPhSIv0A"  # Replace with actual key

# Initialize OpenAI API with GPT-4o
llm = ChatOpenAI(model="gpt-4o")

# Define Agents
document_extractor = Agent(
    role="Document Extractor",
    goal="Summarize legal contracts into concise overviews, capturing key points and structure.",
    backstory="You are an expert paralegal with extensive experience in reviewing legal documents. You excel at extracting essential information and presenting it clearly.",
    llm=llm,
    verbose=True
)

clause_analyzer = Agent(
    role="Clause Analyzer",
    goal="Identify and analyze key clauses in legal contracts, explaining their purpose and implications.",
    backstory="You are a seasoned contract lawyer with a keen eye for detail, specializing in breaking down complex contract clauses into understandable terms.",
    llm=llm,
    verbose=True
)

risk_detector = Agent(
    role="Risk Detector",
    goal="Identify and flag potentially risky clauses in legal contracts, highlighting issues that may pose legal or financial risks.",
    backstory="You are a risk management specialist with deep knowledge of contract law, adept at spotting problematic clauses that could lead to disputes or liabilities.",
    llm=llm,
    verbose=True
)

# Define Tasks
extract_document_task = Task(
    description="Read the provided legal contract and generate a concise summary (150-200 words) that captures the key points, including parties involved, main obligations, and contract purpose. Ensure the summary is clear and professional.",
    expected_output="A 150-200 word summary of the contract, highlighting key points such as parties, obligations, and purpose.",
    agent=document_extractor
)

analyze_clauses_task = Task(
    description="Identify and analyze key clauses in the provided legal contract. For each major clause (e.g., termination, confidentiality, liability), provide a brief explanation of its purpose and legal implications. List at least 3-5 key clauses.",
    expected_output="A list of 3-5 key clauses with a brief explanation of each clause's purpose and legal implications.",
    agent=clause_analyzer
)

detect_risks_task = Task(
    description="Review the provided legal contract and flag any clauses that may pose legal or financial risks. For each risky clause, explain the potential issue and suggest mitigation strategies. Highlight at least 2-3 potential risks.",
    expected_output="A report listing 2-3 potentially risky clauses, with explanations of the risks and suggested mitigation strategies.",
    agent=risk_detector
)

# Create Crew
crew = Crew(
    agents=[document_extractor, clause_analyzer, risk_detector],
    tasks=[extract_document_task, analyze_clauses_task, detect_risks_task],
    verbose=True
)

# Function to read contract from file (text or PDF)
def read_contract_file():
    uploaded = files.upload()
    filename = list(uploaded.keys())[0]
    if filename.endswith('.pdf'):
        with open(filename, 'rb') as file:
            pdf = PyPDF2.PdfReader(file)
            return "".join(page.extract_text() for page in pdf.pages)
    else:
        with open(filename, 'r') as file:
            return file.read()

# Sample contract (used if no file is uploaded)
sample_contract = """
Example Contract: This Agreement is made between Company A (the "Client") and Company B (the "Service Provider") on August 8, 2025. The Client engages the Service Provider to deliver software development services. The Service Provider shall complete the project by December 31, 2025. The Client agrees to pay $50,000 upon completion. The contract includes a confidentiality clause preventing disclosure of proprietary information. Termination may occur with 30 days' notice by either party. Liability is limited to the contract value.
"""

# Prompt user to choose input method
use_upload = input("Do you want to upload a contract file (y/n)? ")
if use_upload.lower() == 'y':
    contract_text = read_contract_file()
else:
    contract_text = sample_contract

# Execute the Crew
result = crew.kickoff(inputs={"contract": contract_text})

# Print results
print("\nSmart Legal Advisor Results:")
print(result)

